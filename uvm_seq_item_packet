//Sequence

class yapp_base_seq extends uvm_sequence #(yapp_packet);
 
    `uvm_object_utils(yapp_base_seq)

    function new(string name="yapp_base_seq");
    super.new(name);
  endfunction

  task pre_body();
    uvm_phase phase;
    `ifdef UVM_VERSION_1_2
      phase = get_starting_phase();
    `else
      phase = starting_phase;
    `endif
    if (phase != null) begin
      phase.raise_objection(this, get_type_name());
      `uvm_info(get_type_name(), "raise objection", UVM_MEDIUM)
    end
  endtask : pre_body

  task post_body();
    uvm_phase phase;
    `ifdef UVM_VERSION_1_2
     
      phase = get_starting_phase();
    `else
      phase = starting_phase;
    `endif
    if (phase != null) begin
      phase.drop_objection(this, get_type_name());
      `uvm_info(get_type_name(), "drop objection", UVM_MEDIUM)
    end
  endtask : post_body

endclass : yapp_base_seq


class yapp_5_packets extends yapp_base_seq;
 
   `uvm_object_utils(yapp_5_packets)

   function new(string name="yapp_5_packets");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_5_packets sequence", UVM_LOW)
     repeat(5)
      `uvm_do(req)
  endtask
 
endclass : yapp_5_packets



class yapp_012_seq extends yapp_base_seq;
 
    `uvm_object_utils(yapp_012_seq)

   function new(string name="yapp_012_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_12_seq", UVM_LOW)
    `uvm_do_with(req,{req.addr==2'b00;})
    `uvm_do_with(req,{req.addr==2'b01;})
    `uvm_do_with(req,{req.addr==2'b10;})

  endtask
 
endclass



class yapp_1_seq extends yapp_base_seq;
 
 
  `uvm_object_utils(yapp_1_seq)

 
  function new(string name="yapp_1_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_1_seq", UVM_LOW)
    `uvm_do_with(req,{req.addr==2'b01;})
  endtask
 
endclass


class yapp_111_seq extends yapp_base_seq;
 
 
  `uvm_object_utils(yapp_111_seq)

   yapp_1_seq addr_1_seq;

 
  function new(string name="yapp_111_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_111_seq", UVM_LOW)
    `uvm_do(addr_1_seq)
  endtask
 
endclass


class yapp_repeat_addr_seq extends yapp_base_seq;
 
 
  `uvm_object_utils( yapp_repeat_addr_seq)

   rand bit[1:0] seqaddr;
   constraint legal_addr{seqaddr!=3;}
 
  function new(string name=" yapp_repeat_addr_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_repeat_addr_seq", UVM_LOW)
     repeat(2)
    `uvm_do_with(req,{req.addr==seqaddr;})
  endtask
 
endclass

class yapp_incr_payload_seq  extends yapp_base_seq;
 
 
  `uvm_object_utils(yapp_incr_payload_seq)

   
  function new(string name="yapp_incr_payload_seq");
    super.new(name);
  endfunction

   virtual task body();
    int ok;
    `uvm_info(get_type_name(), "Executing yapp_incr_payload_seq", UVM_LOW)
     `uvm_create(req)
     ok=req.randomize();
     foreach(req.payload[i])
     req.payload[i]=i;
     req.set_parity();
     `uvm_send(req)
       
   endtask
 
endclass




class yapp_rnd_seq extends yapp_base_seq;

 
  `uvm_object_utils(yapp_rnd_seq)

 
  rand int count;

 
  constraint count_limit { count inside {[1:10]}; }

    function new(string name="yapp_rnd_seq");
    super.new(name);
  endfunction

    virtual task body();
    `uvm_info(get_type_name(), $sformatf("Executing YAPP_RND_SEQ %0d times...", count), UVM_LOW)
    repeat (count) begin
      `uvm_do(req)
    end
  endtask

endclass : yapp_rnd_seq



class six_yapp_seq extends yapp_base_seq;

 
  `uvm_object_utils(six_yapp_seq)

    yapp_rnd_seq yss;

    function new(string name="six_yapp_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing SIX_YAPP_SEQ" , UVM_LOW)
    `uvm_do_with(yss, {count==6;})
  endtask

endclass : six_yapp_seq

class yapp_exhaustive_seq extends yapp_base_seq;
 
    `uvm_object_utils(yapp_exhaustive_seq)

    yapp_012_seq y012;
    yapp_1_seq  y1;
    yapp_111_seq y111;
    yapp_repeat_addr_seq yaddr;
    yapp_incr_payload_seq yinc;
    six_yapp_seq sys;
 
  function new(string name="yapp_exhaustive_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_exhaustive_seq", UVM_LOW)
    `uvm_do(y012)
    `uvm_do(y1)
    `uvm_do(y111)
    `uvm_do(yaddr)
    `uvm_do(yinc)
    `uvm_do(sys)

  endtask
 
endclass


class yapp_4_channel_seq extends yapp_base_seq;

  `uvm_object_utils(yapp_4_channel_seq)  
   
  function new(string name="yapp_4_channel_seq");
    super.new(name);
  endfunction
   
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_4_channel_seq sequence", UVM_LOW)
    `uvm_create(req)
    req.packet_delay = 1;
    for(int add=0; add<4; add++) begin
      req.addr = add;
      for(int lgt=1; lgt<=63; lgt++) begin  
req.length = lgt;
req.payload = new[lgt];
for(int pld=0; pld<lgt; pld++)
 req.payload[pld] = pld;
 randcase
   40: req.parity_type = BAD_PARITY;
   60: req.parity_type = GOOD_PARITY;
 endcase
 req.set_parity();
 `uvm_send(req)
end
      end  
   endtask : body

endclass
